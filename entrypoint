#!/bin/bash
set -e
BIND_ADDRESS="0.0.0.0"
PUBLIC_PATH="public"
LOG_DIR="."
DATASTORE_LOCATION="./"
FILESTORE_DIRECTORY="./"
CLIENT_DIR="/velociraptor/clients"

# Set default values
if [[ $VELOX_MODE != "minion" ]]; then VELOX_MODE="master"; fi
if [[ $VELOX_API_PORT == "" ]]; then VELOX_API_PORT=8001; fi
if [[ $VELOX_API_CONNECT_PORT == "" ]]; then VELOX_API_CONNECT_PORT=$VELOX_API_PORT; fi


# If no existing server config, set it up
if [[ $VELOX_MODE == "master" ]]; then

	# Move binaries into place
	mkdir -p $CLIENT_DIR/linux && rsync -a /opt/velociraptor/linux/velociraptor /velociraptor/clients/linux/velociraptor_client
	mkdir -p $CLIENT_DIR/mac && rsync -a /opt/velociraptor/mac/velociraptor_client /velociraptor/clients/mac/velociraptor_client
	mkdir -p $CLIENT_DIR/windows && rsync -a /opt/velociraptor/windows/velociraptor_client* /velociraptor/clients/windows/

	# Generate server config on first start
	if [ ! -f server.config.yaml ]; then
		velociraptor config generate > server.config.yaml --merge '{"Frontend":{"public_path":"'$PUBLIC_PATH'", "hostname":"'$VELOX_FRONTEND_HOSTNAME'"},"API":{"bind_address":"'$BIND_ADDRESS'","bind_port":'$VELOX_API_PORT',"hostname":"'$VELOX_API_HOSTNAME'"},"GUI":{"bind_address":"'$BIND_ADDRESS'"},"Monitoring":{"bind_address":"'$BIND_ADDRESS'"},"Logging":{"output_directory":"'$LOG_DIR'","separate_logs_per_component":true},"Client":{"server_urls":["'$VELOX_SERVER_URL'"],"use_self_signed_ssl":true}, "Datastore":{"location":"'$DATASTORE_LOCATION'", "filestore_directory":"'$FILESTORE_DIRECTORY'"}}'
		#sed -i "s#https://localhost:8000/#$VELOX_CLIENT_URL#" server.config.yaml
		sed -i 's#/tmp/velociraptor#.#'g server.config.yaml

		# Create local user
		if [[ $VELOX_USER != "" ]]; then
			velociraptor --config server.config.yaml user add $VELOX_USER $VELOX_PASSWORD --role $VELOX_ROLE
		fi
		
		# Create initial OIDC users - comma seperated list of e-mail addresses
		if [[ $VELOX_OIDC_USER != "" ]]; then
			IFS=',' read -r -a array <<< $VELOX_OIDC_USER
			for element in "${array[@]}"
			do
				velociraptor --config server.config.yaml user add $element --role $VELOX_OIDC_ROLE
			done
		fi
	fi
	# Re-generate server config in case it changed
	velociraptor config show --config server.config.yaml > server_.config.yaml --merge '{"Frontend":{"public_path":"'$PUBLIC_PATH'", "hostname":"'$VELOX_FRONTEND_HOSTNAME'"},"API":{"bind_address":"'$BIND_ADDRESS'","bind_port":'$VELOX_API_PORT',"hostname":"'$VELOX_API_HOSTNAME'"},"GUI":{"bind_address":"'$BIND_ADDRESS'"},"Monitoring":{"bind_address":"'$BIND_ADDRESS'"},"Logging":{"output_directory":"'$LOG_DIR'","separate_logs_per_component":true},"Client":{"server_urls":["'$VELOX_SERVER_URL'"],"use_self_signed_ssl":true}, "Datastore":{"location":"'$DATASTORE_LOCATION'", "filestore_directory":"'$FILESTORE_DIRECTORY'"}}'
	# Set re-generated config to be the active one
	# must be done in two steps because the file would be overwritten before its being read otherwise
	mv server_.config.yaml server.config.yaml

	# Re-generate client config in case server config changed
	velociraptor --config server.config.yaml config client > client.config.yaml

	# Repack clients
	velociraptor config repack --exe clients/linux/velociraptor_client client.config.yaml clients/linux/velociraptor_client_repacked
	velociraptor config repack --exe clients/mac/velociraptor_client client.config.yaml clients/mac/velociraptor_client_repacked
	velociraptor config repack --exe clients/windows/velociraptor_client.exe client.config.yaml clients/windows/velociraptor_client_repacked.exe
fi

# Start Velociraptor
if [[ $VELOX_MODE == "master" ]]; then
    velociraptor --config server.config.yaml frontend
elif [[ $VELOX_MODE == "minion" ]]; then
	# wait for master to be up
	while [ $(curl -ksw "%{http_code}\n" "https://velociraptor:8889" -o /dev/null) -ne 302 ]; do sleep 5; echo "Waiting for master to be up..."; done

    velociraptor --config server.config.yaml frontend --minion --config.api-bind-port=$VELOX_API_CONNECT_PORT --config.frontend-bind-port=$VELOX_SERVER_PORT
fi